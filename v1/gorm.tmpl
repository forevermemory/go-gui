package dbaccess

/*
date:{{ .now }}
*/

type {{ .ModelName }} struct {
	Id int `json:"id" form:"id" gorm:"column:id;primary_key;auto_increment;comment:'主键'"`

	{{ range  $value := .datas }}{{ $value.field }}	{{ $value.kind }}	`json:"{{ $value.json }}" form:"{{ $value.json }}" gorm:"column:{{ $value.json }};comment:'{{ $value.comment }}'"`
	{{end}}
	IsDelete tinyint(1) `json:"-" form:"-" gorm:"column:IS_DELETE;default:0"` // 0 未删除
	PageNo   int    `json:"pageNo" form:"pageNo" gorm:"-"`
	PageSize int    `json:"pageSize" form:"pageSize" gorm:"-"`
}

func (o *{{ .ModelName }}) TableName() string {
	return "{{ .TableName }}"
}

func Delete{{ .ModelName }}(id int) error {
	db := OpenGorm()
	return db.Table("{{ .TableName }}").Where("id = ?", id).Update("IS_DELETE", 1).Error
}

func Get{{ .ModelName }}ById(id int) (*{{ .ModelName }}, error) {
	db := OpenGorm()
	o := &{{ .ModelName }}{}
	err := db.Table("{{ .TableName }}").Where("IS_DELETE = 0").Where("id = ?", id).First(o).Error
	return o, err
}

func Add{{ .ModelName }}(o *{{ .ModelName }}) error {
	db := OpenGorm()
	return db.Create(o).Error
}

func Update{{ .ModelName }}(o *{{ .ModelName }}) error {
	db := OpenGorm()
	return db.Table("{{ .TableName }}").Where("id=?", o.Id).Update(o).Error
}

func List{{ .ModelName }}(o *{{ .ModelName }}) ([]*{{ .ModelName }}, error) {
	db := OpenGorm()
	res := make([]*{{ .ModelName }}, 0)
	err := db.Table("{{ .TableName }}").Where("IS_DELETE = 0").Where(o).Offset((o.PageNo - 1) * o.PageSize).Limit(o.PageSize).Find(&res).Error
	return res, err
}

func Count{{ .ModelName }}(o *{{ .ModelName }}) (int64, error) {
	db := OpenGorm()
	var count int64
	err := db.Table("{{ .TableName }}").Where("IS_DELETE = 0").Where(o).Count(&count).Error
	return count, err
}
